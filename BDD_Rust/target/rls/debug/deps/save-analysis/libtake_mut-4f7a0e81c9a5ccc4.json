{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2","program":"C:\\Users\\nikla_y88vj7d\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","take_mut","C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=4f7a0e81c9a5ccc4","-C","extra-filename=-4f7a0e81c9a5ccc4","--out-dir","c:\\Users\\nikla_y88vj7d\\OneDrive\\Desktop\\BigDataDijkstra_Rust\\BDD_Rust\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\nikla_y88vj7d\\OneDrive\\Desktop\\BigDataDijkstra_Rust\\BDD_Rust\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\nikla_y88vj7d\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\nikla_y88vj7d\\OneDrive\\Desktop\\BigDataDijkstra_Rust\\BDD_Rust\\target\\rls\\debug\\deps\\libtake_mut-4f7a0e81c9a5ccc4.rmeta"},"prelude":{"crate_id":{"name":"take_mut","disambiguator":[3560250133678479151,9782819357179637907]},"crate_root":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src","external_crates":[{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[14664243863007151186,13029296787848565560]}},{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[10973483057139175867,4092977820595504105]}},{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[5344968526663694908,5854973613798060781]}},{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14551701718388451589,8584422242678588409]}},{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6143882857039415599,5494129795406748407]}},{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[9037026435662606504,10577775618308791929]}},{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15244332605556921560,15997253764330093455]}},{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[496393125628069379,10121348063997143337]}},{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[14891368759234060001,17337422003014977783]}},{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[9539026828135594574,18385042694178804316]}},{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[5817650502020334249,13012108553651615857]}},{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[12364111099303107650,4225371417860886929]}},{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[1593379990131481620,6691744023912804689]}}],"span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","byte_start":0,"byte_end":4341,"line_start":1,"line_end":147,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","byte_start":0,"byte_end":4341,"line_start":1,"line_end":147,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":56},{"krate":0,"index":62}],"decl_id":null,"docs":" This crate provides several functions for handling `&mut T` including `take()`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scoped","qualname":"::scoped","value":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":13},{"krate":0,"index":27},{"krate":0,"index":32},{"krate":0,"index":41},{"krate":0,"index":49}],"decl_id":null,"docs":" This module provides a scoped API, allowing for taking an arbitrary number of `&mut T` into `T` within one closure.\n The references are all required to outlive the closure.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","byte_start":5261,"byte_end":5283,"line_start":30,"line_end":30,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":9},"span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","byte_start":5500,"byte_end":5505,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Scope","qualname":"::scoped::Scope","value":"Scope {  }","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12}],"decl_id":null,"docs":" Represents a scope within which, it is possible to take a `T` from a `&mut T` as long as the `&mut T` outlives the scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","byte_start":5860,"byte_end":5875,"line_start":49,"line_end":49,"column_start":12,"column_end":27},"name":"take_or_recover","qualname":"<Scope>::take_or_recover","value":"fn <'c, 'm, T, F> (&'c self, mut_ref: &'m mut T, recovery: F) -> (T, Hole<'c, 'm, T, F>)","parent":null,"children":[],"decl_id":null,"docs":" Takes a `(T, Hole<'c, 'm, T, F>)` from an `&'m mut T`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","byte_start":6655,"byte_end":6659,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"take","qualname":"<Scope>::take","value":"fn <'c, 'm, T> (&'c self, mut_ref: &'m mut T) -> (T, Hole<'c, 'm, T, fn() -> T>)","parent":null,"children":[],"decl_id":null,"docs":" Takes a `(T, Hole<'c, 'm, T, F>)` from an `&'m mut T`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","byte_start":7048,"byte_end":7053,"line_start":84,"line_end":84,"column_start":8,"column_end":13},"name":"scope","qualname":"::scoped::scope","value":"fn <'s, F, R> (f: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Main function to create a `Scope`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","byte_start":7830,"byte_end":7834,"line_start":106,"line_end":106,"column_start":12,"column_end":16},"name":"Hole","qualname":"::scoped::Hole","value":"Hole {  }","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40}],"decl_id":null,"docs":" A `Hole<'c, 'm, T, F>` represents an unfilled `&'m mut T` which must be filled before the end of the `Scope` with lifetime `'c` and recovery closure `F`.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","byte_start":7807,"byte_end":7818,"line_start":105,"line_end":105,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","byte_start":8082,"byte_end":8086,"line_start":115,"line_end":115,"column_start":12,"column_end":16},"name":"fill","qualname":"<Hole>::fill","value":"fn (self, t: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fills the Hole.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","byte_start":1246,"byte_end":1250,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"take","qualname":"::take","value":"fn <T, F> (mut_ref: &mut T, closure: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Allows use of a value pointed to by `&mut T` as though it was owned, as long as a `T` is made available afterwards.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","byte_start":2595,"byte_end":2610,"line_start":81,"line_end":81,"column_start":8,"column_end":23},"name":"take_or_recover","qualname":"::take_or_recover","value":"fn <T, F, R> (mut_ref: &mut T, recover: R, closure: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Allows use of a value pointed to by `&mut T` as though it was owned, as long as a `T` is made available afterwards.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","byte_start":5597,"byte_end":5602,"line_start":44,"line_end":44,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","byte_start":8026,"byte_end":8030,"line_start":113,"line_end":113,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","byte_start":8397,"byte_end":8401,"line_start":128,"line_end":128,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\lib.rs","byte_start":695,"byte_end":701,"line_start":12,"line_end":12,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","byte_start":5597,"byte_end":5602,"line_start":44,"line_end":44,"column_start":10,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":9},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","byte_start":8026,"byte_end":8030,"line_start":113,"line_end":113,"column_start":39,"column_end":43},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":32},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\nikla_y88vj7d\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\take_mut-0.2.2\\src\\scoped.rs","byte_start":8397,"byte_end":8401,"line_start":128,"line_end":128,"column_start":48,"column_end":52},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":32},"to":{"krate":2,"index":1726}}]}